# _core/data_loader.py
import os
import pandas as pd
from typing import Optional, List
from pathlib import Path

from _core.paths import DATA_DIR

DATE_CANDIDATES: List[str] = ["datetime", "date", "TRADEDATE", "DATE", "Datetime"]

def _resolve_path(ticker_or_path: str) -> Optional[str]:
    if os.path.exists(ticker_or_path):
        return ticker_or_path
    path_in_data = DATA_DIR / ticker_or_path
    if path_in_data.exists():
        return str(path_in_data)
    ticker = str(ticker_or_path).upper().strip()
    candidates = [f"{ticker}.csv", f"{ticker}_D1.csv", f"{ticker}_D1_MOEX.csv"]
    for fname in candidates:
        p = DATA_DIR / fname
        if p.exists():
            return str(p)
    return None

def _detect_date_column(df: pd.DataFrame) -> Optional[str]:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    cols = {c.lower() for c in df.columns}
    for candidate in DATE_CANDIDATES:
        if candidate.lower() in cols:
            for original_col in df.columns:
                if original_col.lower() == candidate.lower():
                    return original_col
    return None

def load_data(ticker_or_path: str) -> Optional[pd.DataFrame]:
    file_path = _resolve_path(ticker_or_path)
    if not file_path:
        return None
    try:
        df = pd.read_csv(file_path, sep=None, engine="python")
    except Exception as e:
        print(f"[load_data] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return None

    if df is None or df.empty:
        return None
        
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–ª–æ–Ω–æ–∫ (–∫–∞–∫ –≤ BRENT.csv), –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    df = df.loc[:, ~df.columns.duplicated(keep='first')]
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    df.columns = [str(col).lower() for col in df.columns]

    date_col = _detect_date_column(df)
    if date_col:
        try:
            # --- üëáüëáüëá –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï üëáüëáüëá ---
            # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (.dt.normalize())
            df[date_col] = pd.to_datetime(df[date_col], errors='coerce').dt.normalize()
            # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ 'datetime'
            df = df.rename(columns={date_col: "datetime"})
            # 3. –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞—Å—å
            df.dropna(subset=['datetime'], inplace=True)
            # 4. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –Ω–æ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
            df.sort_values("datetime", inplace=True)
            df.reset_index(drop=True, inplace=True)
            # --- üëÜüëÜüëÜ –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø üëÜüëÜüëÜ ---
        except Exception as e:
            print(f"[load_data] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤ {file_path}: {e}")
            return None
            
    return df