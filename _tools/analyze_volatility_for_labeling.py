# _tools/analyze_volatility_for_labeling.py
import pandas as pd
import numpy as np
from tqdm import tqdm
import argparse
from pathlib import Path

# --- –ü—Ä—è–º–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π ---
PROJECT_DIR = Path(__file__).resolve().parents[1]
DATA_DIR = PROJECT_DIR / "1_data"
UNIVERSE_FILE = PROJECT_DIR / "universe.csv"
# ---

def run_data_quality_report(horizon: int, sma_window: int, deviation_threshold: float):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:
    1. –ò—â–µ—Ç –≤—ã–±—Ä–æ—Å—ã –∫–∞–∫ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ.
    2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è TP/SL.
    """
    try:
        tickers = pd.read_csv(UNIVERSE_FILE, header=0)['ticker'].tolist()
    except (FileNotFoundError, KeyError):
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ {UNIVERSE_FILE}")
        return

    all_tp_returns = []
    all_sl_returns = []
    outlier_details = []

    print(f"–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(tickers)} –∞–∫—Ü–∏–π...")
    
    for ticker in tqdm(tickers, desc="–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π"):
        # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
        found_path = None
        possible_suffixes = ['.csv', '_D1_MOEX.csv', '_D1.csv']
        for suffix in possible_suffixes:
            path_candidate = DATA_DIR / f"{ticker}{suffix}"
            if path_candidate.exists():
                found_path = path_candidate
                break
        if not found_path:
            continue

        df = pd.read_csv(found_path, parse_dates=['datetime'])
        if df.empty or len(df) <= horizon or len(df) <= sma_window:
            continue
            
        df = df.sort_values('datetime').reset_index(drop=True)
        
        # --- –ù–û–í–´–ô –ú–ï–¢–û–î –ü–û–ò–°–ö–ê –í–´–ë–†–û–°–û–í ---
        if deviation_threshold > 0:
            df['sma'] = df['close'].rolling(window=sma_window, min_periods=1).mean()
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º high —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —Å SMA –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            df['prev_sma'] = df['sma'].shift(1)
            df['deviation_ratio'] = df['high'] / df['prev_sma']
            
            outlier_df = df[df['deviation_ratio'] > deviation_threshold]
            
            for _, row in outlier_df.iterrows():
                outlier_details.append({
                    'ticker': ticker,
                    'date': row['datetime'].date(),
                    'reason': f"High ({row['high']:.2f}) > {deviation_threshold:.1f}x SMA ({row['prev_sma']:.2f})"
                })
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê ---

        # --- –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è TP/SL (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞) ---
        highs = df['high'].to_numpy()
        lows = df['low'].to_numpy()
        closes = df['close'].to_numpy()
        
        for i in range(len(df) - horizon):
            entry_price = closes[i]
            if pd.isna(entry_price) or entry_price == 0:
                continue
            
            future_window_highs = highs[i + 1 : i + 1 + horizon]
            future_window_lows = lows[i + 1 : i + 1 + horizon]
            
            potential_tp = (np.max(future_window_highs) - entry_price) / entry_price
            potential_sl = (np.min(future_window_lows) - entry_price) / entry_price
            
            all_tp_returns.append(potential_tp)
            all_sl_returns.append(potential_sl)

    # --- –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤—ã–±—Ä–æ—Å–∞–º ---
    if outlier_details:
        print("\n\n" + "="*50)
        print("üöÄ –ù–∞–π–¥–µ–Ω—ã –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç SMA (–≤—ã–±—Ä–æ—Å—ã) üöÄ")
        print("="*50)
        outliers_df = pd.DataFrame(outlier_details)
        print(outliers_df.sort_values(by=['ticker', 'date']).to_string())
    else:
        print("\n\n" + "="*50)
        print("‚úÖ –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç SMA –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("="*50)

    # --- –†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    if not all_tp_returns:
        print("\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    positive_moves = np.array([r for r in all_tp_returns if r > 0 and np.isfinite(r)])
    negative_moves = np.array([r for r in all_sl_returns if r < 0 and np.isfinite(r)])
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    print("\n" + "="*50)
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –í–ï–†–•–ù–ò–ú –¥–≤–∏–∂–µ–Ω–∏—è–º (–¥–ª—è Take Profit)")
    print("="*50)
    if len(positive_moves) > 0:
        print(f"–ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ): {positive_moves.mean():.4f} ({positive_moves.mean():.2%})")
        print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {positive_moves.std():.4f} ({positive_moves.std():.2%})")
        print(f"–ú–µ–¥–∏–∞–Ω–∞ (50-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å): {np.median(positive_moves):.4f} ({np.median(positive_moves):.2%})")
        print(f"75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {np.percentile(positive_moves, 75):.4f} ({np.percentile(positive_moves, 75):.2%})")
        print(f"95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {np.percentile(positive_moves, 95):.4f} ({np.percentile(positive_moves, 95):.2%})")
    else:
        print("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    print("\n" + "="*50)
    print("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ù–ò–ñ–ù–ò–ú –¥–≤–∏–∂–µ–Ω–∏—è–º (–¥–ª—è Stop Loss)")
    print("="*50)
    if len(negative_moves) > 0:
        negative_moves_abs = np.abs(negative_moves)
        print(f"–ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ): {negative_moves_abs.mean():.4f} ({negative_moves_abs.mean():.2%})")
        print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {negative_moves_abs.std():.4f} ({negative_moves_abs.std():.2%})")
        print(f"–ú–µ–¥–∏–∞–Ω–∞ (50-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å): {np.median(negative_moves_abs):.4f} ({np.median(negative_moves_abs):.2%})")
        print(f"75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {np.percentile(negative_moves_abs, 75):.4f} ({np.percentile(negative_moves_abs, 75):.2%})")
    else:
        print("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    print("="*50)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤.")
    parser.add_argument('--horizon', type=int, default=10, help='–ì–æ—Ä–∏–∑–æ–Ω—Ç –≤ –¥–Ω—è—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.')
    # --- –ù–û–í–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ ---
    parser.add_argument('--sma-window', type=int, default=10, help='–û–∫–Ω–æ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤.')
    parser.add_argument('--deviation-threshold', type=float, default=2.0, help='–ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç SMA (2.0 = –≤ 2 —Ä–∞–∑–∞ –≤—ã—à–µ).')
    args = parser.parse_args()
    
    run_data_quality_report(args.horizon, args.sma_window, args.deviation_threshold)