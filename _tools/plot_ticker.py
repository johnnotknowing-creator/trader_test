# _tools/plot_ticker.py
import argparse
from pathlib import Path
import warnings
import os

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.style as style

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—É—Ç–µ–π ---
import matplotlib
matplotlib.use('Agg')

warnings.filterwarnings("ignore", category=UserWarning)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
style.use('dark_background')

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
try:
    from _core.paths import DATA_DIR, RESULTS_DIR, ensure_dirs
    from _core.data_loader import load_data
except ImportError:
    import sys
    PROJECT_ROOT = Path(__file__).resolve().parent.parent
    if str(PROJECT_ROOT) not in sys.path:
        sys.path.append(str(PROJECT_ROOT))
    from _core.paths import DATA_DIR, RESULTS_DIR, ensure_dirs
    from _core.data_loader import load_data

def main(args):
    print(f"--- üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{args.ticker}' ---")

    # --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ 1_data ---
    df = load_data(args.ticker)

    if df is None or df.empty:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{args.ticker}'.")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ: {DATA_DIR}")
        return

    # --- 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ ---
    df['datetime'] = pd.to_datetime(df['datetime'])
    
    end_date = df['datetime'].max()
    start_date = end_date - pd.DateOffset(years=args.years)
    df_plot = df[df['datetime'] >= start_date].copy()

    if df_plot.empty:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{args.ticker}'.")
        return
        
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(df_plot)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.date()} –ø–æ {end_date.date()}.")

    # --- 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
    print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...")
    fig, ax = plt.subplots(figsize=(20, 10))
    
    ax.plot(df_plot['datetime'], df_plot['close'], label=f'–¶–µ–Ω–∞ Close –¥–ª—è {args.ticker.upper()}', color='deepskyblue', linewidth=1.5)
    
    ax.set_title(f"–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ {args.ticker.upper()} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ (–∏—Å—Ç–æ—á–Ω–∏–∫: 1_data)", fontsize=18, pad=20)
    ax.set_ylabel("–¶–µ–Ω–∞", fontsize=14)
    ax.set_xlabel("–î–∞—Ç–∞", fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.3)
    ax.legend(fontsize=12)
    
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right")
    plt.tight_layout()
    
    # --- 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    report_dir = RESULTS_DIR / "reports"
    report_dir.mkdir(exist_ok=True, parents=True)
    output_path = report_dir / f"price_chart_{args.ticker}.png"
    plt.savefig(output_path)
    
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø–∞–ø–∫–∏ 1_data.")
    parser.add_argument("--ticker", type=str, required=True, help="–¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä. SBER).")
    parser.add_argument("--years", type=int, default=1, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.")
    
    args = parser.parse_args()
    main(args)