import argparse
import pandas as pd
import numpy as np
from pathlib import Path

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
PROJECT_ROOT = Path(__file__).resolve().parents[1]
RESULTS_DIR = PROJECT_ROOT / "2_results"

def main(args):
    print(f"--- ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏: {args.model_name} ---")
    
    data_path = RESULTS_DIR / "final_for_model" / args.model_name / "train_final.csv"
    
    if not data_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {data_path}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–∫—Ä–∏–ø—Ç assemble_final_data.py –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.")
        return

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_path}")
    try:
        df = pd.read_csv(data_path)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª: {e}")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
    exclude_cols = {'datetime', 'ticker', 'label', 'meta_target'}
    feature_cols = [col for col in df.columns if col not in exclude_cols]
    
    if not feature_cols:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –≤ —Ñ–∞–π–ª–µ.")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(feature_cols)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...")

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
    stats = df[feature_cols].describe().transpose()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ NaN –∏ Inf
    stats['nan_count'] = df[feature_cols].isnull().sum()
    stats['inf_count'] = df[feature_cols].apply(lambda x: np.isinf(x).sum())
    
    # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    # –í—ã–±—Ä–æ—Å—ã: –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ä–µ–¥–Ω–∏–º
    stats['is_outlier'] = (stats['std'] > 1000) & (stats['std'] > abs(stats['mean']) * 10)
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é
    stats['is_constant'] = stats['std'] == 0
    
    problematic_features = stats[
        (stats['nan_count'] > 0) | 
        (stats['inf_count'] > 0) | 
        (stats['is_outlier']) |
        (stats['is_constant'])
    ]

    print("\n" + "="*80)
    if problematic_features.empty:
        print("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (NaN, Inf, –≤—ã–±—Ä–æ—Å—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º:")
        print(stats[['mean', 'std', 'min', 'max']].to_string())
    else:
        print("‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
        print(problematic_features[['mean', 'std', 'min', 'max', 'nan_count', 'inf_count', 'is_outlier']].to_string())
        print("\n–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(stats.to_string())
    print("="*80)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–π.")
    parser.add_argument(
        "--model_name", 
        type=str, 
        required=True, 
        help="–ò–º—è –º–æ–¥–µ–ª–∏, —á—å–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'universal_60_10_v1_35_features')."
    )
    args = parser.parse_args()
    main(args)