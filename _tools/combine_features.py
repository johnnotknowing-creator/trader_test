import argparse
from pathlib import Path
import pandas as pd
from tqdm import tqdm
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
PROJECT_ROOT = Path(__file__).resolve().parents[1]
RESULTS_DIR = PROJECT_ROOT / "2_results"
FEATURES_DIR_PROCESSED = RESULTS_DIR / "features_processed"

def main(args):
    print("--- üîÑ –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---")

    # --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É—Ç–µ–π üëá ---
    manual_dir = FEATURES_DIR_PROCESSED
    # –ü–∞–ø–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (AE –∏–ª–∏ PCA)
    new_features_dir = RESULTS_DIR / args.new_features_path
    output_dir = RESULTS_DIR / "features_combined" / args.output_model_name
    output_dir.mkdir(parents=True, exist_ok=True)
    # --- üëÜ –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø üëÜ ---

    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫ —Ä—É—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {manual_dir}")
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {new_features_dir}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_dir}")

    manual_files = list(manual_dir.glob("*.csv"))
    if not manual_files:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä—É—á–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –≤ {manual_dir}")
        return

    for manual_file_path in tqdm(manual_files, desc="–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"):
        base_filename = os.path.basename(manual_file_path)
        new_feature_file_path = new_features_dir / base_filename

        if not new_feature_file_path.exists():
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –¥–ª—è —Ñ–∞–π–ª–∞ {base_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏.")
            continue

        df_manual = pd.read_csv(manual_file_path)
        df_new = pd.read_csv(new_feature_file_path)

        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ df_new —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (AE_* –∏–ª–∏ PCA_*) –∏ –∫–ª—é—á –¥–ª—è —Å–ª–∏—è–Ω–∏—è
        new_feature_cols = [col for col in df_new.columns if col.startswith(('AE_', 'PCA_'))]
        cols_to_merge = ['datetime'] + new_feature_cols
        df_to_merge = df_new[cols_to_merge].copy()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –¥–∞—Ç–µ
        df_manual['datetime'] = pd.to_datetime(df_manual['datetime'])
        df_to_merge['datetime'] = pd.to_datetime(df_to_merge['datetime'])
        
        combined_df = pd.merge(df_manual, df_to_merge, on="datetime", how="left")
        
        combined_df.to_csv(output_dir / base_filename, index=False)

    print(f"\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Combine manual and generated (AE or PCA) features.")
    parser.add_argument("--output_model_name", type=str, required=True, help="A new, unique name for the combined feature set.")
    # --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤ üëá ---
    parser.add_argument("--new_features_path", type=str, required=True, 
                        help="Path to the new features relative to '2_results' (e.g., 'features_pca/pca_v1' or 'features_encoded/dae_v1').")
    
    args = parser.parse_args()
    main(args)