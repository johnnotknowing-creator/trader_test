from _core.paths import PROJECT_ROOT, DATA_DIR, RESULTS_DIR, TOOLS_DIR, CONFIGS_DIR, ensure_dirs, load_dotenv_if_exists
from _core.libs import *
load_dotenv_if_exists()
ensure_dirs()
# _tools/feature_selector_hybrid.py
from _core.data_loader import load_data
from _core.feature_generator import create_features

def load_selected_features(model_name):
    path = os.path.join(PROJECT_ROOT, "2_results", f"selected_features_{model_name}.json")
    with open(path, "r") as f:
        feats = json.load(f)
    return feats

def borda_rank(list_a, list_b, penalty=None):
    """
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–π —Ñ–∏—á–µ —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–Ω–≥: rankA + rankB.
    –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—É—á–∞—é—Ç —à—Ç—Ä–∞—Ñ = penalty (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é max(lenA,lenB)+5).
    """
    lenA, lenB = len(list_a), len(list_b)
    if penalty is None:
        penalty = max(lenA, lenB) + 5

    ranks = {}
    for i, f in enumerate(list_a):
        ranks.setdefault(f, 0)
        ranks[f] += (i + 1)
    for i, f in enumerate(list_b):
        ranks.setdefault(f, 0)
        ranks[f] += (i + 1)
    # –ù–∞–∫–∞–∂–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    union = set(list_a) | set(list_b)
    for f in union:
        if f not in list_a:
            ranks[f] += penalty
        if f not in list_b:
            ranks[f] += penalty
    # –í –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ)
    ranked = sorted(ranks.items(), key=lambda x: x[1])
    return ranked  # [(feature, score), ...]

def build_index_df(data_dir):
    index_raw_df = load_data(os.path.join(data_dir, "IMOEX.csv"))
    idx = index_raw_df.copy()
    for p in [10, 20, 50]:
        idx[f'index_roc_{p}'] = ta.roc(idx['close'], length=p)
    idx.reset_index(inplace=True)
    return idx

def sample_universe(universe_path, k=60):
    tickers = pd.read_csv(universe_path)['ticker'].dropna().unique().tolist()
    if len(tickers) > k:
        rng = np.random.default_rng(42)
        tickers = sorted(rng.choice(tickers, size=k, replace=False).tolist())
    return tickers

def build_feature_frame(tickers, data_dir, index_df, horizon=20, min_len=500):
    frames = []
    for t in tqdm(tickers, desc="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä-–º–∞—Ç—Ä–∏—Ü—ã"):
        df = load_data(os.path.join(data_dir, f"{t}_D1_MOEX.csv"))
        if df is None or len(df) < min_len:
            continue
        feats = create_features(df, index_df=index_df, horizon=horizon)
        if feats.empty:
            continue
        # –í–æ–∑—å–º—ë–º ¬´—Å—Ç–∞—Ä—É—é¬ª —á–∞—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å –≤—Å—ë (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
        frames.append(feats.iloc[:-252])
    if not frames:
        return None
    big = pd.concat(frames, ignore_index=True)
    return big

def correlation_filter(features_ordered, corr_df, threshold=0.9):
    """–ò–¥—ë–º –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É; –µ—Å–ª–∏ —Ñ–∏—á–∞ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."""
    selected = []
    for f in features_ordered:
        if f not in corr_df.columns:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ñ–∏—á–∏ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –±–µ—Ä—ë–º
            selected.append(f)
            continue
        ok = True
        for s in selected:
            if s in corr_df.columns:
                if abs(corr_df.loc[f, s]) >= threshold:
                    ok = False
                    break
        if ok:
            selected.append(f)
    return selected

def main(args):
    data_dir = os.path.join(PROJECT_ROOT, "1_data")
    results_dir = os.path.join(PROJECT_ROOT, "2_results")
    os.makedirs(results_dir, exist_ok=True)

    # 1) –°—á–∏—Ç—ã–≤–∞–µ–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∏—á
    feats_a = load_selected_features(args.model_name_a)
    feats_b = load_selected_features(args.model_name_b)

    # 2) –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–∞–Ω–≥–∏ (Borda)
    ranked = borda_rank(feats_a, feats_b)
    union_order = [f for f, _ in ranked]

    # 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ
    if not args.no_corr_filter:
        print("\n--- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä—Ä.–º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---")
        index_df = build_index_df(data_dir)
        tickers = sample_universe(os.path.join(PROJECT_ROOT, args.universe_file), k=args.sample_tickers)
        feat_frame = build_feature_frame(tickers, data_dir, index_df, horizon=20)
        if feat_frame is None:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–æ—Ä—Ä-—Ñ–∏–ª—å—Ç—Ä.")
            corr_df = None
        else:
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ñ–∏—á–∏ –∏–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            cols = [c for c in union_order if c in feat_frame.columns]
            corr_df = feat_frame[cols].corr()
    else:
        corr_df = None

    # 4) –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä-—Ñ–∏–ª—å—Ç—Ä
    if corr_df is not None:
        filtered = correlation_filter(union_order, corr_df, threshold=args.corr_threshold)
    else:
        filtered = union_order

    # 5) –û–±—Ä–µ–∑–∞–µ–º –¥–æ TOP_N –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    final_feats = filtered[:args.top_n]

    out_json = os.path.join(results_dir, f"selected_features_{args.out_model_name}.json")
    with open(out_json, "w") as f:
        json.dump(final_feats, f, indent=4)
    print(f"\n‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ {len(final_feats)} —Ñ–∏—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_json}")

    # 6) –û—Ç—á—ë—Ç –ø–æ —Ä–∞–Ω–≥–∞–º
    rep = pd.DataFrame(ranked, columns=["feature", "borda_rank"])
    rep["in_A"] = rep["feature"].isin(feats_a).astype(int)
    rep["in_B"] = rep["feature"].isin(feats_b).astype(int)
    rep["selected"] = rep["feature"].isin(final_feats).astype(int)
    out_csv = os.path.join(results_dir, f"hybrid_rank_{args.out_model_name}.csv")
    rep.to_csv(out_csv, index=False)
    print(f"üìÑ –û—Ç—á—ë—Ç –ø–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–Ω–≥–∞–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_csv}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Borda + –∫–æ—Ä—Ä-—Ñ–∏–ª—å—Ç—Ä).")
    parser.add_argument('--model_name_a', type=str, required=True, help='–ò–º—è –Ω–∞–±–æ—Ä–∞ —Ñ–∏—á #A (–±–µ–∑ selected_features_*.json)')
    parser.add_argument('--model_name_b', type=str, required=True, help='–ò–º—è –Ω–∞–±–æ—Ä–∞ —Ñ–∏—á #B')
    parser.add_argument('--out_model_name', type=str, required=True, help='–ò–º—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∏—á')
    parser.add_argument('--universe_file', type=str, default='universe.csv', help='–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ä–æ–≤')
    parser.add_argument('--top_n', type=int, default=25, help='–°–∫–æ–ª—å–∫–æ —Ñ–∏—á –æ—Å—Ç–∞–≤–∏—Ç—å')
    parser.add_argument('--corr_threshold', type=float, default=0.9, help='–ü–æ—Ä–æ–≥ |œÅ| –¥–ª—è –∫–æ—Ä—Ä-—Ñ–∏–ª—å—Ç—Ä–∞')
    parser.add_argument('--sample_tickers', type=int, default=60, help='–°–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ –±—Ä–∞—Ç—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')
    parser.add_argument('--no_corr_filter', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä')
    args = parser.parse_args()
    main(args)
